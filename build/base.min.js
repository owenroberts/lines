class Drawing{constructor(t){if(this.points=[],t)for(let s=0;s<t.length;s++)this.add(t[s]);this.offset=new Cool.Vector}add(t){"end"==t||0==t?this.points.push("end"):Array.isArray(t)?this.points.push(new Cool.Vector(t)):(t.off=[],this.points.push(t))}pop(){this.points.pop()}get(t){return t<0?this.points[this.points.length-t]:this.points[t]}get length(){return this.points.length}update(t){const{n:s,r:e,w:i,v:r,ws:o}=t,h=(new Cool.Vector).random(r);this.offset=(new Cool.Vector).random(0,i);for(let t=0;t<this.points.length;t++)if("end"!=this.points[t]){this.points[t].off=[];for(let r=0;r<s;r++){if(i>0&&(0==r||o)){this.offset.add(h);for(const t in h)(this.offset[t]>=i||this.offset[t]<=-i)&&(h[t]*=-1)}this.points[t].off.push({x:Cool.random(-e,e)+this.offset.x,y:Cool.random(-e,e)+this.offset.y})}}}}class LinesAnimation{constructor(t,s,e){this.ctx=t,this.isLoaded=!1,this.isPlaying=!1,this.multiColor=e||!0,this.drawings=[],this.layers=[],this.dps=s||30,this.fps=5,this.currentFrame=0,this.drawsPerFrame=Math.round(this.dps/this.fps),this.drawCount=0,this.props={off:{x:0,y:0},speed:{x:0,y:0},over:{}},this._state="default",this.states={default:{start:0,end:0}}}set fps(t){this._fps=+t,this.drawsPerFrame=Math.round(this.dps/this.fps),this.drawCount=0}get fps(){return this._fps}set frame(t){this.currentFrame=+t,this.states.default&&this.states.default.end!=this.endFrame&&(this.states.default.end=this.endFrame)}get endFrame(){return this.layers.length>0?Math.max.apply(Math,this.layers.map(t=>t.f.e)):0}set state(t){this._state!=t&&this.states[t]&&(this._state=t,this.state&&(this.frame=this.state.start))}get state(){return this.states[this._state]}get stateName(){return this._state}overrideProperty(t,s){this.props.override[t]=s}cancelOverride(){this.props.override={}}update(){this.isPlaying&&(this.drawCount==this.drawsPerFrame&&(this.currentFrame>=this.state.end?(this.currentFrame=this.state.start,this.onPlayedState&&this.onPlayedState()):this.currentFrame++,this.drawCount=0),this.drawCount++,this.onUpdate&&this.onUpdate())}draw(t,s,e){this.multiColor||this.ctx.beginPath();const i=this.layers.filter(t=>this.currentFrame>=t.f.s&&this.currentFrame<=t.f.e).sort((t,s)=>t.order?t.order>s.order?1:-1:1);for(let r=0;r<i.length;r++){const o=i[r],h=this.drawings[o.d];if(this.currentFrame>=o.f.s&&this.currentFrame<=o.f.e){this.props.s=0,this.props.e=h.length;for(const t in o)this.props[t]=o[t];if(t&&(this.props.x+=t),s&&(this.props.y+=s),o.t)for(let t=0;t<o.t.length;t++){const s=o.t[t];s.sf<=this.currentFrame&&s.ef>=this.currentFrame&&(this.props[s.prop]=Cool.map(this.currentFrame,s.sf,s.ef,s.sv,s.ev),"s"!=s.prop&&"e"!=s.prop||(this.props[s.prop]=Math.round(this.props[s.prop])))}for(const t in this.over)this.props[t]=this.over[t];e||(o.lc>=o.l?(h.update(this.props),o.lc=0):o.lc++),this.multiColor&&this.ctx.beginPath();for(let t=this.props.s;t<this.props.e-1;t++){const s=h.get(t),e=h.get(t+1);if("end"!==s&&"end"!==e){const t=[...s.off,...e.off];if(t.length<this.props.n+1)for(let s=t.length-1;s<this.props.n+1;s++)t.push(new Cool.Vector);const i=new Cool.Vector(e.x,e.y);i.subtract(s),i.divide(this.props.n),this.ctx.moveTo(this.props.x+s.x+t[0].x,this.props.y+s.y+t[0].y);for(let e=0;e<this.props.n;e++){const r=s.clone().add(i.clone().multiply(e));t[e+1]||console.log("k + 1",e+1,this.props,t,h),this.ctx.lineTo(this.props.x+r.x+i.x+t[e+1].x,this.props.y+r.y+i.y+t[e+1].y)}this.ctx.strokeStyle!=this.props.c&&this.multiColor&&(this.ctx.strokeStyle=this.props.c)}}this.multiColor&&this.ctx.stroke()}}this.multiColor||this.ctx.stroke(),this.onDraw&&this.onDraw()}load(t,s){fetch(t).then(t=>t.json()).then(t=>{this.loadData(t,s)}).catch(t=>{console.error(t)})}loadJSON(t,s){this.loadData(t,s)}loadData(t,s){this.loaded=!0;for(let s=0;s<t.d.length;s++)this.drawings[s]=t.d[s]?new Drawing(t.d[s]):null;this.layers=t.l;for(let t=0;t<this.layers.length;t++){const s=this.layers[t];s.l||(s.l=5),s.lc||(s.lc=0),this.drawings[s.d].update(s)}for(const s in t.s)this.states[s]=t.s[s];this.states.default&&(this.states.default.end=this.endFrame),this.fps=t.fps,t.mc&&(this.multiColor=t.mc),this.width=t.w,this.height=t.h,s&&s(t),this.onLoad&&this.onLoad()}setOnLoad(t){this.isLoaded?t():this.onLoad=t}}
//# sourceMappingURL=src_maps/base.min.js.map
