class Drawing{constructor(t){if(this.points=[],t)for(let e=0;e<t.length;e++)this.add(t[e]);this.offset=new Cool.Vector}add(t){"end"==t||0==t?this.points.push("end"):Array.isArray(t)?this.points.push(new Cool.Vector(t)):(t.off=[],this.points.push(t))}pop(){this.points.pop()}get(t){return t<0?this.points[this.points.length-t]:this.points[t]}get length(){return this.points.length}update(t){const{segmentNum:e,jiggleRange:s,wiggleRange:i,wiggleSpeed:r,wiggleSegments:h}=t,n=(new Cool.Vector).random(r);this.offset=(new Cool.Vector).random(0,i);for(let t=0;t<this.points.length;t++)if("end"!=this.points[t]){this.points[t].off=[];for(let r=0;r<e;r++){if(i>0&&(0==r||h)){this.offset.add(n);for(const t in n)(this.offset[t]>=i||this.offset[t]<=-i)&&(n[t]*=-1)}this.points[t].off.push({x:Cool.random(-s,s)+this.offset.x,y:Cool.random(-s,s)+this.offset.y})}}}}class Layer{constructor(t,e){this.drawingIndex=t.d,this.x=t.x||0,this.y=t.y||0,this.tweens=t.t||[],this.f=t.f,this._startFrame=t.f.s,this._endFrame=t.f.e,this.drawingStartIndex=0,this.drawingEndIndex=e||-1,this.color=t.c||t.color||"#000000",this.segmentNum=t.segmentNum||t.n,this.jiggleRange=t.jiggleRange||t.r,this.wiggleRange=t.wiggleRange||t.w,this.wiggleSpeed=t.wiggleSpeed||t.v,this.wiggleSegments=t.wiggleSegments||t.ws||!1,this.breaks=t.breaks||t.b||!1,t.o&&(this.order=t.o),this.linesInterval=t.l||5,this.linesCount=0,this.isToggled=!1,this.resetTweens()}update(){return this.linesCount>=this.linesInterval?(this.linesCount=0,!0):(this.linesCount++,!1)}toggle(){this.isToggled?"#00CC96"==this.color&&(this.color=this.tempColor):(this.tempColor=this.color,this.color="#00CC96"),this.isToggled=!this.isToggled}remove(){lns.anim.layers.splice(lns.anim.layers.indexOf(this),1)}addTween(t){this.tweens.push(t),t.sf<this.startFrame&&(this.startFrame=t.sf),t.ef>this.endFrame&&(this.endFrame=t.ef)}get startFrame(){return this._startFrame}set startFrame(t){this._startFrame=Math.max(0,+t),this.resetTweens()}get endFrame(){return this._endFrame}set endFrame(t){this._endFrame=Math.max(0,+t),this.resetTweens()}addIndex(t){if(!this.isInFrame(t))if(this.f.s-1==t)this.f.s-=1;else{if(this.f.e+1!=t)return new Layer({...this,f:{s:t,e:t}});this.f.e+=1}return this}removeIndex(t,e){if(this.startFrame==t&&this.endFrame==t)e();else if(this.startFrame==t)this.startFrame+=1;else{if(this.endFrame!=t){if(t>this.startFrame&&t<this.endFrame){const e=_.cloneDeep(this);return e.startFrame=t+1,e.endFrame=this.endFrame,e.resetTweens(),this.endFrame=t-1,this.resetTweens(),e}return this}this.endFrame-=1}this.resetTweens()}shiftIndex(t,e){return e||(e=-1),this.startFrame>=t&&(this.startFrame+=e),this.endFrame>=t&&(this.endFrame+=e),this.resetTweens(),this}isInFrame(t){return t>=this.startFrame&&t<=this.endFrame}get saveProps(){const t={n:this.segmentNum,r:this.jiggleRange,w:this.wiggleRange,v:this.wiggleSpeed,ws:this.wiggleSegments,x:this.x,y:this.y,c:this.isToggled?this.tempColor:this.color,f:{s:this.startFrame,e:this.endFrame},d:this.drawingIndex};return this.tweens&&(t.t=this.tweens),this.order&&(t.o=this.order),t}get props(){const t={segmentNum:this.segmentNum,jiggleRange:this.jiggleRange,wiggleRange:this.wiggleRange,wiggleSpeed:this.wiggleSpeed,wiggleSegments:this.wiggleSegments,x:this.x,y:this.y,l:this.l,linesInterval:this.linesInterval,c:this.isToggled?this.tempColor:this.color};return this.order&&(t.o=this.order),t}get drawProps(){const t={segmentNum:this.segmentNum,jiggleRange:this.jiggleRange,wiggleRange:this.wiggleRange,wiggleSpeed:this.wiggleSpeed,wiggleSegments:this.wiggleSegments,x:this.x,y:this.y,linesCount:this.linesCount,linesInterval:this.linesInterval,color:this.color,startIndex:this.drawingStartIndex,tweens:this.tweens};return this.order&&(t.o=this.order),t}resetTweens(){for(let t=0;t<this.tweens.length;t++){const e=this.tweens[t];e.sf<this.startFrame&&(e.sf=this.startFrame),e.ef>this.endFrame&&(e.ef=this.endFrame)}}}class LinesAnimation{constructor(t,e,s){this.ctx=t,this.isLoaded=!1,this.isPlaying=!1,this.multiColor=s||!0,this.drawings=[],this.layers=[],this.dps=e||30,this.fps=5,this.currentFrame=0,this.drawsPerFrame=Math.round(this.dps/this.fps),this.drawCount=0,this.override={},this._state="default",this.states={default:{start:0,end:0}}}set fps(t){this._fps=+t,this.drawsPerFrame=Math.round(this.dps/this.fps),this.drawCount=0}get fps(){return this._fps}set frame(t){this.currentFrame=+t,this.states.default&&this.states.default.end!=this.endFrame&&(this.states.default.end=this.endFrame)}get endFrame(){const t=this.layers.map(t=>t.endFrame);return Math.max.apply(Math,t)}set state(t){this._state!=t&&this.states[t]&&(this._state=t,this.state&&(this.frame=this.state.start))}get state(){return this.states[this._state]}get stateName(){return this._state}overrideProperty(t,e){this.override[t]=e}cancelOverride(){this.override={}}update(){this.isPlaying&&(this.drawCount==this.drawsPerFrame&&(this.currentFrame>=this.state.end?(this.currentFrame=this.state.start,this.onPlayedState&&this.onPlayedState()):this.currentFrame++,this.drawCount=0),this.drawCount++,this.onUpdate&&this.onUpdate())}draw(t,e,s){this.multiColor||this.ctx.beginPath();const i=this.layers.filter(t=>t.isInFrame(this.currentFrame)).sort((t,e)=>t.order?t.order>e.order?1:-1:1);for(let r=0;r<i.length;r++){const h=i[r],n=this.drawings[h.drawingIndex],a=h.drawProps;if(t&&(a.x+=t),e&&(a.y+=e),a.tweens)for(let t=0;t<a.tweens.length;t++){const e=a.tweens[t];e.sf<=this.currentFrame&&e.ef>=this.currentFrame&&(this.props[e.prop]=Cool.map(this.currentFrame,e.sf,e.ef,e.sv,e.ev),"s"!=e.prop&&"e"!=e.prop||(this.props[e.prop]=Math.round(this.props[e.prop])))}for(const t in this.override)a[t]=this.override[t];if(!s){h.update()&&n.update(a)}this.multiColor&&this.ctx.beginPath();for(let t=a.startIndex,e=n.length;t<e-1;t++){const e=n.get(t),s=n.get(t+1);if("end"!==e&&"end"!==s){const t=[...e.off,...s.off];if(t.length<a.segmentNum+1)for(let e=t.length-1;e<a.segmentNum+1;e++)t.push(new Cool.Vector);const i=new Cool.Vector(s.x,s.y);i.subtract(e),i.divide(a.segmentNum),this.ctx.moveTo(a.x+e.x+t[0].x,a.y+e.y+t[0].y);for(let s=0;s<a.segmentNum;s++){const r=e.clone().add(i.clone().multiply(s));t[s+1]||console.log("k + 1",s+1,a,t,n);const h=a.breaks?s:s+1;this.ctx.lineTo(a.x+r.x+i.x+t[h].x,a.y+r.y+i.y+t[h].y)}this.ctx.strokeStyle!=a.color&&this.multiColor&&(this.ctx.strokeStyle=a.color)}}this.multiColor&&this.ctx.stroke()}this.multiColor||this.ctx.stroke(),this.onDraw&&this.onDraw()}load(t,e){fetch(t).then(t=>t.json()).then(t=>{this.loadData(t,e)}).catch(t=>{console.error(t)})}loadJSON(t,e){this.loadData(t,e)}loadData(t,e){this.loaded=!0;for(let e=0;e<t.d.length;e++)this.drawings[e]=t.d[e]?new Drawing(t.d[e]):null;for(let e=0;e<t.l.length;e++)this.layers[e]=new Layer(t.l[e],this.drawings[t.l[e].d].length);for(let t=0;t<this.layers.length;t++){const e=this.layers[t];this.drawings[e.drawingIndex].update(e)}for(const e in t.s)this.states[e]=t.s[e];this.states.default&&(this.states.default.end=this.endFrame),this.fps=t.fps,t.mc&&(this.multiColor=t.mc),this.width=t.w,this.height=t.h,e&&e(t),this.onLoad&&this.onLoad()}setOnLoad(t){this.isLoaded?t():this.onLoad=t}}
//# sourceMappingURL=src_maps/base.min.js.map
