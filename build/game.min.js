class Sprite{constructor(t,s,i,e){this.position=[Math.round(t),Math.round(s)],this.size=[0,0],this.debug=!1,this.debugColor="#00ffbb",this.isActive=!0,this.center=!1,i&&this.addAnimation(i,e)}get x(){return this.xy[0]}get y(){return this.xy[1]}get width(){return this.size[0]}get height(){return this.size[1]}get xy(){return this.center?[this.position[0]-this.size[0]/2,this.position[1]-this.size[1]/2]:this.position}addAnimation(t,s){this.animation=t,this.size=[this.animation.width,this.animation.height],s&&s()}drawDebug(){GAME.ctx.lineWidth=1,GAME.ctx.beginPath(),GAME.ctx.rect(this.x,this.y,this.width,this.height);const t=GAME.ctx.strokeStyle;GAME.ctx.strokeStyle=this.debugColor,GAME.ctx.stroke(),GAME.ctx.strokeStyle=t,this.label&&GAME.ctx.fillText(this.label,this.position.x,this.position.y),1!==GAME.lineWidth&&(GAME.ctx.lineWidth=GAME.lineWidth)}display(t){let s=!1;s=void 0!==t?t:this.isActive&&this.isOnScreen(),s&&(this.debug&&this.drawDebug(),this.animation&&(this.animation.update(),this.animation.draw(this.x,this.y,GAME.suspend))),this.displayFunc&&this.displayFunc()}isOnScreen(){return this.x+this.width>0&&this.y+this.height>0&&this.x<GAME.view.width&&this.y<GAME.view.height}}class ColliderSprite extends Sprite{constructor(t,s,i,e){super(t,s),this.collider={position:[0,0],size:[0,0]},this.mouseOver=!1,this.waitToGoOut=!1,this.clickStarted=!1,i&&this.addAnimation(i,e)}addAnimation(t,s){super.addAnimation(t,s),this.collider.size[0]=this.animation.width,this.collider.size[1]=this.animation.height}setCollider(t,s,i,e){this.collider.position[0]=t,this.collider.position[1]=s,this.collider.size[0]=i,this.collider.size[1]=e}drawDebug(){GAME.ctx.lineWidth=1,GAME.ctx.beginPath(),GAME.ctx.rect(this.x+this.collider.position[0],this.y+this.collider.position[1],this.collider.size[0],this.collider.size[1]);const t=GAME.ctx.strokeStyle;GAME.ctx.strokeStyle=this.debugColor,GAME.ctx.stroke(),GAME.ctx.strokeStyle=t,1!=GAME.lineWidth&&(GAME.ctx.lineWidth=GAME.lineWidth)}get pos(){return[this.x+this.collider.position[0],this.y+this.collider.position[1]]}get siz(){return[this.collider.size[0],this.collider.size[1]]}collide(t,s){return!!(this.isActive&&t.isActive&&this.pos[0]<t.pos[0]+t.siz[0]&&this.pos[0]+this.siz[0]>t.pos[0]&&this.pos[1]<t.pos[0]+t.siz[1]&&this.pos[1]+this.siz[1]>t.pos[1])&&(s&&s(this),!0)}tap(t,s){return t>this.pos[0]*GAME.zoom&&t<(this.pos[0]+this.siz[0])*GAME.zoom&&s>this.pos[1]*GAME.zoom&&s<(this.pos[1]+this.siz[1])*GAME.zoom}outside(t){var s=this.position.copy(),i=this.collider.position.copy();s.add(i),s.add(this.velocity);var e=this.collider.size.copy();return s.x<t.position.x+t.collider.position.x||s.x+e.x>t.position.x+t.collider.position.x+t.collider.size.x||s.y<t.position.y+t.collider.position.y||s.y+e.y>t.position.y+t.collider.position.y+t.collider.size.y}over(t,s){return this.debug&&console.log(this.tap(t,s)),!(!this.isActive||!this.tap(t,s)||this.mouseOver||this.waitToGoOut)&&(this.mouseOver=!0,this.onOver&&this.onOver(),!0)}out(t,s){return!(!this.isActive||this.tap(t,s)||!this.mouseOver&&!this.waitToGoOut)&&(this.clickStarted=!1,this.waitToGoOut=!1,this.mouseOver=!1,this.onOut&&this.onOut(),!0)}down(t,s){return!(!this.isActive||!this.tap(t,s))&&(this.clickStarted=!0,this.waitToGoOut=!0,this.onDown&&this.onDown(),!0)}up(t,s){return!!(this.isActive&&this.tap(t,s)&&this.clickStarted)&&(this.mouseOver=!1,this.onUp&&this.onUp(),this.onClick&&this.onClick(),this.func&&this.func(),!0)}}class UI extends ColliderSprite{constructor(t,s){let i=t.x,e=t.y;i%1!=0&&(i=Math.round(GAME.view.width*i)),i<0&&(i=Math.round(GAME.view.width+i)),e%1!=0&&(e=Math.round(GAME.view.height*e)),e<0&&(e=Math.round(GAME.view.height+e)),super(i,e),this.debug=s,this.center=void 0===t.center||t.center,t.hidden&&(this.isActive=!1),t.animation&&(this.addAnimation(t.animation),this.animation.isPlaying=!0),t.states&&(this.animation.states=t.states,this.animation.state="idle"),t.isButton&&(this.animation.states={idle:{start:0,end:0},over:{start:1,end:1},down:{start:2,end:2}},this.onOver=function(){this.animation.state="over"},this.onOut=function(){this.animation.state="idle"},this.onDown=function(){this.animation.state="down"},this.onUp=function(){this.animation.state="over"},this.animation.state="idle"),this.scenes=t.scenes,t.func&&(this.func=window[t.func]),t.callback&&(this.callback=t.callback),t.onClick&&(this.onClick=t.onClick)}}class Scene{constructor(){this.displaySprites=new SpriteCollection,this.updateSprites=new SpriteCollection,this.uiSprites=new SpriteCollection}add(t){this.displaySprites.add(t),this.updateSprites.add(t),this.uiSprites.add(t)}remove(t,s){const i=s?[s]:["display","update","ui"];for(let s=0;s<i.length;s++)this[i[s]+"Sprites"].remove(t)}addSprite(t){this.displaySprites.add(t),this.updateSprites.add(t)}addUI(t){this.displaySprites.add(t),this.uiSprites.add(t)}addToDisplay(t){this.displaySprites.add(t)}addToUpdate(t){this.updateSprites.add(t)}addToUI(t){this.uiSprites.add(t)}display(t){this.displaySprites.all(s=>{s.display(t)})}update(t){this.updateSprites.all(s=>{s.update(t)})}mouseMoved(t,s){this.uiSprites.all(i=>{i.over(t,s),i.out(t,s)})}mouseDown(t,s){this.uiSprites.all(i=>{i.down(t,s)})}mouseUp(t,s){this.uiSprites.all(i=>{i.up(t,s)})}}class Button extends UI{constructor(t,s){super(t,s),this.mouseOver=!1,this.waitToGoOut=!1,this.clickStarted=!1,t.onOver&&(this.onOver=t.onOver),t.onOut&&(this.onOut=t.onOut),t.onDown&&(this.onDown=t.onDown),t.onClick&&(this.onClick=t.onClick)}over(t,s){const i=super.over(t,s);return i&&(this.animation.state="over"),i}out(t,s){const i=super.out(t,s);return i&&(this.animation.state="idle"),i}down(t,s){const i=super.down(t,s);return i&&(this.animation.state="active"),i}up(t,s){const i=super.up(t,s);return i&&(this.animation.state="idle"),i}}class Entity extends Sprite{constructor(t,s){super(t.x,t.y),this.debug=s,this.origin=[t.x,t.y],t.animation&&this.addAnimation(t.animation),void 0!==t.loop&&(this.animation.loop=t.loop),t.play&&this.animation.play(),this.center=void 0===t.center||t.center}update(t){this.position[0]=this.origin[0]+t[0],this.position[1]=this.origin[1]+t[1]}setPosition(t,s){this.origin[0]=t,this.origin[1]=s}}class Game{constructor(t){if(window.GAME=this,this.canvas=document.getElementById(t.canvas||"lines"),this.width=t.width,this.height=t.height,this.halfWidth=t.width/2,this.halfHeight=t.height/2,this.multiColor=t.multiColor||!1,this.debug=t.debug||!1,this.suspendOnTimeOver=t.suspend||!1,this.suspend=!1,this.editorSuspend=!1,this.lineWidth=t.lineWidth||1,this.checkRetina=void 0===t.checkRetina||t.checkRetina,this.zoom=t.zoom,this.relativeLoadPath=t.relativeLoadPath,this.dps=t.dps||30,this.drawTime=performance.now(),this.drawInterval=1e3/t.dps,window.drawCount=0,this.updateTime=performance.now(),this.updateInterval=1e3/60,this.clearBg=!0,this.bounds=t.bounds||{top:0,bottom:0,left:0,right:0},this.scenes=new SceneManager(t.scenes,Scene),this.data={},this.anims={},this.useMouseEvents=!t.events||t.events.includes("mouse"),this.useKeyboardEvents=!t.events||t.events.includes("keyboard"),this.useTouchEvents=!!t.events&&t.events.includes("touch"),this.view={width:this.width,height:this.height},this.canvas.getContext){this.ctx=this.canvas.getContext("2d"),this.dpr=this.checkRetina&&window.devicePixelRatio||1,this.canvas.width=this.width*this.dpr,this.canvas.height=this.height*this.dpr,this.ctx.scale(this.dpr,this.dpr),this.canvas.style.zoom=1/this.dpr;const s=t.zoom||1;this.zoom=t.zoom;const i=t.isEditor?this.dpr:1;this.view.width=Math.round(this.width/s*i),this.view.height=Math.round(this.height/s*i),this.view.halfWidth=this.view.width/2,this.view.halfHeight=this.view.height/2,t.zoom&&this.ctx.scale(t.zoom*i,t.zoom*i),t.lineColor&&(this.ctx.strokeStyle=t.lineColor),t.stats&&(this.stats=new Stats,document.body.appendChild(this.stats.dom),this.stats.dom.style.left="auto",this.stats.dom.style.right="0px",this.drawStats=new Stats,document.body.appendChild(this.drawStats.dom),this.drawStats.dom.style.left="auto",this.drawStats.dom.style.right="0px",this.drawStats.dom.style.top="48px"),this.ctx.lineWidth=this.lineWidth,this.ctx.miterLimit=1}}setView(t,s){this.width=t,this.height=s,this.halfWidth=t/2,this.halfHeight=s/2,this.canvas.width=this.width*this.dpr,this.canvas.height=this.height*this.dpr,this.ctx.scale(this.dpr,this.dpr),this.canvas.style.zoom=1/this.dpr,this.view.width=Math.round(this.width/this.zoom),this.view.height=Math.round(this.height/this.zoom),this.view.halfWidth=this.view.width/2,this.view.halfHeight=this.view.height/2,this.zoom&&this.ctx.scale(this.zoom,this.zoom),this.ctx.lineWidth=this.lineWidth,this.ctx.miterLimit=1}load(t,s,i){this.debug&&console.log("loading data"),this.debug&&console.time("load data"),this.assetsLoaded={};const e=Object.keys(t).length;for(const i in t){const e=t[i];fetch(e).then(t=>{if(t.ok)return t.url.includes("csv")?t.text():t.json();throw new Error("Network response was not ok.")}).then(t=>{if(this.data[i]={},this.anims[i]={},this.assetsLoaded[i]={},"object"==typeof t){this.data[i].entries=t;for(const e in t)this.assetsLoaded[i][e]=!!s,s||this.loadJSON(i,e,t[e].src),this.data[i].entries[e].src=t[e].src}else{const s=CSVToArray(t,",").splice(0);this.data[i].entries=[];const e=s[0];for(let t=1;t<s.length;t++){const h={};for(let i=0;i<e.length;i++)h[e[i]]=s[t][i];this.data[i].entries.push(h),this.assetsLoaded[i][h.label]=!1,this.loadJSON(i,h.label,`drawings/${i}/${h.label}.json`)}}}).catch(t=>{console.error(t),this.assetsLoaded[i]=!0})}const h=setInterval(()=>{let t=Object.keys(this.assetsLoaded).length==e;for(const s in this.assetsLoaded)for(const i in this.assetsLoaded[s])this.assetsLoaded[s][i]||(t=!1);t&&(this.debug&&console.timeEnd("load data"),clearInterval(h),this._start())},1e3/60)}loadJSON(t,s,i){this.relativeLoadPath&&(i="."+i),fetch(i).then(t=>t.json()).then(e=>{this.anims[t][s]=new GameAnim,this.anims[t][s].src=i,this.anims[t][s].loadData(e,()=>{this.assetsLoaded[t][s]=!0})})}_start(){this.drawTime=performance.now(),this.updateTime=performance.now(),this.start&&this.start(),this.update||(this.noUpdate=!0),requestAnimFrame(()=>{this._update()}),this.useMouseEvents&&this.startMouseEvents(),this.useKeyboardEvents&&this.startKeyboardEvents(),this.useTouchEvents&&this.startTouchEvents(),this.sizeCanvas&&window.addEventListener("resize",this.sizeCanvas,!1)}_draw(t){this.stats&&this.drawStats.begin(),this.clearBg&&this.ctx.clearRect(0,0,this.view.width,this.view.height),this.draw(t-this.drawTime),drawCount++,this.drawTime=t-(t-this.drawTime)%this.drawInterval,this.stats&&this.drawStats.end()}_update(){if(this.pauseGame)return;this.stats&&this.stats.begin(),requestAnimFrame(()=>{this._update()});const t=performance.now();t>this.updateTime+this.updateInterval&&(this.suspendOnTimeOver&&!this.editorSuspend&&(!this.suspend&&t-this.updateTime>1.5*this.drawInterval?this.suspend=!0:this.suspend&&(this.suspend=!1)),this.noUpdate||this.update(t-this.updateTime),this.updateTime=t-(t-this.updateTime)%this.updateInterval),t>this.drawTime+this.drawInterval&&this._draw(t),this.stats&&this.stats.end()}setBounds(t,s){this.bounds[t]=Math.round(s)}updateBounds(t){t.y<this.bounds.top&&(this.bounds.top=Math.round(t.y)),t.y>this.bounds.bottom&&(this.bounds.bottom=Math.round(t.y+this.height)),t.x>this.bounds.right&&(this.bounds.right=Math.round(t.x+this.width/2)),t.x<this.bounds.left&&(this.bounds.left=Math.round(t.x-this.width/2))}startMouseEvents(){let t,s=!1;this.canvas.addEventListener("click",t=>{t.preventDefault(),this.mouseClicked&&this.mouseClicked(t.offsetX,t.offsetY)},!1),this.canvas.addEventListener("mousedown",i=>{i.preventDefault(),this.mouseDown&&this.mouseDown(i.offsetX,i.offsetY,i.which,i.shiftKey),this.startDrag&&(t=startDrag(i.offsetX,i.offsetY),t&&(s=!0))},!1),this.canvas.addEventListener("mouseup",t=>{t.preventDefault(),this.mouseUp&&this.mouseUp(t.offsetX,t.offsetY,t.which),s&&(s=!1)},!1),this.canvas.addEventListener("mousemove",i=>{this.mouseMoved&&this.mouseMoved(i.offsetX,i.offsetY,i.which),s&&drag(i.offsetX,i.offsetY,t)},!1)}startTouchEvents(){this.canvas.addEventListener("touchstart",t=>{t.preventDefault(),this.touchStart&&this.touchStart(t)},!1),this.canvas.addEventListener("touchmove",t=>{t.preventDefault(),this.touchMove&&this.touchMove(t)},!1),this.canvas.addEventListener("touchend",t=>{t.preventDefault(),this.touchEnd&&this.touchEnd(t)},!1)}startKeyboardEvents(){document.addEventListener("keydown",t=>{this.keyDown&&"INPUT"!==t.target.tagName&&this.keyDown(Cool.keys[t.which])}),document.addEventListener("keyup",t=>{this.keyUp&&"INPUT"!==t.target.tagName&&this.keyUp(Cool.keys[t.which])})}}window.LinesClass=Lines;class GameAnim extends LinesClass{constructor(t){super(GAME.ctx,GAME.dps,GAME.multiColor),this.debug=t,this.loop=!0,this.randomFrames=!1,this.prevFrame=0,this.frames=[]}update(){if(this.isPlaying){if(this.drawCount==this.drawsPerFrame){if(this.randomFrames){for(;this.prevFrame==this.currentFrame;)this.currentFrame=Cool.randomInt(this.state.start,this.state.end);this.prevFrame=this.currentFrame}else this.currentFrame>=this.state.end?(this.currentFrame=this.loop?this.state.start:this.state.end,this.onPlayedOnce&&(this.onPlayedOnce(),this.onPlayedOnce=void 0),this.onPlayedState&&this.onPlayedState()):this.currentFrame++;this.drawCount=0}this.drawCount++,this.onUpdate&&this.onUpdate()}}createNewState(t,s,i){this.states[t]||(this.states[t]={start:s,end:i}),this.state=t}playStateCheck(){this.state.start!=this.state.end&&(this.isPlaying=!0)}set state(t){this._state!=t&&this.states[t]&&(this._state=t,this.state&&(this.frame=this.state.start),this.isPlaying||"default"==t||(this.isPlaying=!0))}get state(){return this.states[this._state]}playOnce(t){this.isPlaying||(this.isPlaying=!0),this.frame=this.state.start,this.onPlayedOnce=t}stop(){this.isPlaying=!1}play(){this.isPlaying=!0}loadData(t,s){super.loadData(t,s);for(let t=0,s=this.layers.length;t<s;t++){const s=this.layers[t];for(let i=s.startFrame;i<=s.endFrame;i++)this.frames[i]||(this.frames[i]=[]),this.frames[i].push(t)}}getLayers(){const t=this.frames[this.currentFrame],s=[];for(let i=0;i<t.length;i++)s.push(this.layers[t[i]]);return s}}class Manager{constructor(t,s){for(let i=0;i<t.length;i++)this[t[i]]=new s;this._current=t[0],this.names=t}set current(t){this._current=t}get current(){return this[this._current]}get currentName(){return this._current}get list(){return this.names}}class SHGScene extends Scene{constructor(t,s,i){super();const e=t.right-t.left,h=t.bottom-t.top;this.grid=new SpatialHashGrid(t,e/s,h/i),this.view=[s,i],this.halfView=[s/2,i/2],this.clients=[]}addSprite(t){this.grid.addSprite(t)}display(){for(let t=0;t<this.clients.length;t++)this.clients[t].sprite.display()}update(t,s){this.clients=this.grid.findNear(s[0]-this.halfView[0],s[1]-this.halfView[1],this.view[0],this.view[1]);for(let s=0;s<this.clients.length;s++)this.clients[s].sprite.update(t)}}class SceneManager extends Manager{add(t,s,i){"string"==typeof s&&(s=[s]);for(let e=0;e<s.length;e++)"display"==i?this[s[e]].addToDisplay(t):"ui"==i?this[s[e]].addUI(t):this[s[e]].addSprite(t)}addToDisplay(t,s){this.add(t,s,"display")}addUI(t,s){this.add(t,s,"ui")}}class SpatialHashGrid{constructor(t,s,i){this.bounds=[[t.left,t.top],[t.right,t.bottom]],this.columns=Math.floor(s),this.rows=Math.floor(i),this.mapSize=[t.right-t.left,t.bottom-t.top],this.cellSize=[Math.round(this.mapSize[0]/this.columns),Math.round(this.mapSize[1]/this.rows)],this.cells=new Array(this.columns*this.rows);for(let t=0;t<this.columns;t++)for(let s=0;s<this.rows;s++)this.cells[this.columns*s+t]=[];this.ids=-1}findNear(t,s,i,e){const h=this.getCellIndex([t-i/2,s-e/2]),o=this.getCellIndex([t+i/2,s+e/2]),a=[],n=this.ids++;for(let t=Math.max(h[0]-1,0);t<=o[0];t++)for(let s=h[1];s<=o[1];s++){const i=this.cells[this.columns*s+t];for(let t=0;t<i.length;t++)i[t].id!==n&&(i[t].id=n,a.push(i[t]))}return a}addSprite(t){this.addClient(t.x,t.y,t.width,t.height,t)}addClient(t,s,i,e,h){const o=this.getCellIndex([t-i/2,s-e/2]),a=this.getCellIndex([t+i/2,s+e/2]),n={position:[t,s],dimensions:[i,e],indexes:[o,a],sprite:h,id:-1};for(let t=o[0];t<=a[0];t++)for(let s=o[1];s<=a[1];s++)this.cells[this.columns*s+t].push(n)}getCellIndex(t){const s=Math.floor((t[0]-this.bounds[0][0])/this.cellSize[0]),i=Math.floor((t[1]-this.bounds[0][1])/this.cellSize[1]);return[Math.max(0,Math.min(s,this.columns-1)),Math.max(0,Math.min(i,this.rows-1))]}}class SpriteCollection{constructor(t){this.sprites=t?[...t]:[]}get length(){return this.sprites.length}includes(t){return this.sprites.includes(t)}sprite(t){return this.sprites[t]}remove(t){this.sprites.splice(this.sprites.indexOf(t),1)}clear(){this.sprites=[]}add(t){this.sprites.includes(t)||this.sprites.push(t)}all(t){for(let s=0;s<this.sprites.length;s++)t(this.sprites[s],s)}update(){this.all(t=>{t.update()})}display(){this.all(t=>{t.display()})}}class Text{constructor(t,s,i,e,h,o){if(this.x=Math.round(t),this.y=Math.round(s),this.lead=35,this.track=18,this.msg=i,this.wrap=e,this.isActive=!0,this.letters=h,this.breaks=[],this.setBreaks(),this.count=0,this.end=0,this.endCount=.5,this.endDelay=GAME.dps||10,this.hover=!1,this.clickStarted=!1,!h.states[0]){const t=o||"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.,:?-+'&$;\"!";for(let s=0;s<t.length;s++)h.createNewState(t[s],s,s)}}setPosition(t,s){this.x=t,this.y=s}setMsg(t){this.msg=t,this.setBreaks()}setBreaks(){let t=!1,s=0,i=!1;this.breaks=[];for(let e=1;e<this.msg.length;e++)i=!1,this.msg[e].match(/[\n\r]/g)&&!i?(this.breaks.push(e),s=e%this.wrap,t=!1):e%this.wrap!=s||t?" "==this.msg[e]&&t&&(this.breaks.push(e),s=e%this.wrap,t=!1,i=!0):" "==this.msg[e]?(this.breaks.push(e),i=!0):t=!0}display(t,s,i,e){if(this.isActive){const o=t?Math.floor(this.count):this.msg.length,a=s?this.end:0;let n=i||this.x,r=e||this.y;for(let t=0;t<o;t++){var h=this.msg[t];" "==h||"_"==h||t<a?n+=this.track:"\n"==h||"\r"==h||(this.letters.state=h,this.letters.draw(n,r),n+=this.track),-1!=this.breaks.indexOf(t)&&(r+=this.lead,n=i||this.x)}if(this.count>=this.msg.length?this.end++:this.count+=this.endCount,s){if(this.end>=this.msg.length)return this.end=0,this.count=0,!0}else if(this.end>=this.endDelay)return this.end=0,this.count=0,!0}}}class TextButton extends UI{constructor(t,s,i,e,h){super({x:t,y:s}),this.center=!1,this.text=new Text(this.position.x,this.position.y,i,e,h),this.setCollider()}setMsg(t){this.text.setMsg(t),this.text.wrap=t.length,this.setCollider()}setCollider(){this.size.x=this.collider.size.x=(this.text.wrap<this.text.msg.length?this.text.wrap:this.text.msg.length)*this.text.track,this.size.y=this.collider.size.y=(this.text.breaks.length+1)*this.text.letters.height}display(){super.display(),this.isActive&&this.text.display()}setPosition(t,s){this.position.x=t,this.position.y=s,this.text.setPosition(t,s)}}class Texture{constructor(t,s){this.locations=t.locations||[],this.frame=t.frame||"index",this.debug=s,this.center=t.center||!1,this.offset=new Cool.Vector(0,0),t.animation&&(this.animation=t.animation),t.locations&&t.animation&&this.addLocations()}addLocation(t,s,i){const e=new Cool.Vector(t,s);if(void 0!==i)this.animation.createNewState("f-"+i,i,i),e.i=i;else if("randomIndex"==this.frame){let t=Cool.randomInt(0,this.animation.endFrame);this.animation.createNewState("f-"+t,t,t),e.i=t}this.locations.push(e)}addLocations(t){t&&this.locations.push(...t);for(let t=0;t<this.locations.length;t++)if("index"===this.frame)this.locations[t].i=t,this.animation.createNewState("f-"+t,t,t);else if("random"===this.frame)this.animation.randomFrames=!0;else if("randomIndex"===this.frame){let s=Cool.randomInt(0,this.animation.endFrame);this.locations[t].i=s,this.animation.createNewState("f-"+s,s,s)}}display(){for(let t=0;t<this.locations.length;t++){let s=this.locations[t].x+this.offset.x,i=this.locations[t].y+this.offset.y;this.center&&(s-=this.animation.width/2,i-=this.animation.height/2),s+this.animation.width>0&&s<GAME.view.width&&i+this.animation.height>0&&i<GAME.view.height&&(void 0!==this.locations[t].i&&(this.animation.state="f-"+this.locations[t].i),this.animation.draw(s,i,GAME.suspend))}}isOnScreen(){let t=[];for(let s=0;s<this.locations.length;s++){let i=this.locations[s].x+this.offset.x,e=this.locations[s].y+this.offset.y;this.center&&(i-=this.animation.width/2,e-=this.animation.height/2),t.push(i+this.animation.width>0&&i<GAME.view.width&&e+this.animation.height>0&&e<GAME.view.height)}return t}update(t){this.offset.x=t.x,this.offset.y=t.y}}class TextureEntity extends Entity{constructor(t,s){super(t,s),this.center=!1,this.stateName="frame-"+t.stateIndex,this.animation.createNewState("frame-"+t.stateIndex,t.stateIndex,t.stateIndex)}display(t){this.animation.state=this.stateName,super.display(t)}}class Toggle extends Button{constructor(t,s){super(t,s),this.toggled=!1}toggle(t,s=!0){this.toggled=t?"on"==t:!this.toggled,this.animation.state=this.toggled?"selected":"idle",this.waitToGoOut=!1,this.mouseOver=!1,this.clickStarted=!1,s&&(this.func&&this.func(this.toggled),this.onClick&&this.onClick(this.toggled))}out(t,s){super.out(t,s),this.animation.state=this.toggled?"selected":"idle"}up(t,s){super.up(),this.tap(t,s)&&this.clickStarted&&this.toggle()}}
//# sourceMappingURL=src_maps/game.min.js.map
