class Sprite{constructor(t,i,s,e,h,o){this.position=new Cool.Vector(t,i),this.size=new Cool.Vector(s,e),this.debug=!1,this.debugColor="#00ffbb",this.collider={position:new Cool.Vector(0,0),size:new Cool.Vector(s,e)},this.isActive=!0,this.center=!1,h&&this.addAnimation(h,o),this.mouseOver=!1,this.waitToGoOut=!1,this.clickStarted=!1}get width(){return this.size.x}get height(){return this.size.y}get xy(){return this.center?this.position.copy().subtract(this.size.copy().divide(2)):this.position}get x(){return this.xy.x}get y(){return this.xy.y}addAnimation(t,i){this.animation=t,this.size.x=this.collider.size.x=this.animation.width,this.size.y=this.collider.size.y=this.animation.height}setCollider(t,i,s,e){this.collider.position.x=t,this.collider.position.y=i,this.collider.size.x=s,this.collider.size.y=e}drawDebug(){GAME.ctx.lineWidth=1,GAME.ctx.beginPath(),GAME.ctx.rect(this.x+this.collider.position.x,this.y+this.collider.position.y,this.collider.size.x,this.collider.size.y);const t=GAME.ctx.strokeStyle;GAME.ctx.strokeStyle=this.debugColor,GAME.ctx.stroke(),GAME.ctx.strokeStyle=t,1!=GAME.lineWidth&&(GAME.ctx.lineWidth=GAME.lineWidth)}display(t){let i=!1;i=void 0!==t?t:this.isActive&&this.isOnScreen(),i&&(this.debug&&this.drawDebug(),this.animation&&(this.animation.update(),this.animation.draw(this.x,this.y,GAME.suspend))),this.displayFunc&&this.displayFunc()}isOnScreen(){return this.x+this.width>0&&this.y+this.height>0&&this.x<GAME.view.width&&this.y<GAME.view.height}tap(t,i){return t>this.x+this.collider.position.x&&t<this.x+this.collider.position.x+this.collider.size.x&&i>this.y+this.collider.position.y&&i<this.y+this.collider.position.y+this.collider.size.y}collide(t,i){return!!(this.isActive&&t.isActive&&this.x+this.collider.position.x<t.x+t.collider.position.x+t.collider.size.x&&this.x+this.collider.position.x+this.collider.size.x>t.x+t.collider.position.x&&this.y+this.collider.position.y<t.y+t.collider.position.y+t.collider.size.y&&this.y+this.collider.position.y+this.collider.size.y>t.y+t.collider.position.y)&&(i&&i(this),!0)}outside(t){var i=this.position.copy(),s=this.collider.position.copy();i.add(s),i.add(this.velocity);var e=this.collider.size.copy();return i.x<t.position.x+t.collider.position.x||i.x+e.x>t.position.x+t.collider.position.x+t.collider.size.x||i.y<t.position.y+t.collider.position.y||i.y+e.y>t.position.y+t.collider.position.y+t.collider.size.y}over(t,i){return!(!this.isActive||!this.tap(t,i)||this.mouseOver||this.waitToGoOut)&&(this.mouseOver=!0,this.onOver&&this.onOver(),!0)}out(t,i){return!(!this.isActive||this.tap(t,i)||!this.mouseOver&&!this.waitToGoOut)&&(this.clickStarted=!1,this.waitToGoOut=!1,this.mouseOver=!1,this.onOut&&this.onOut(),!0)}down(t,i){return!(!this.isActive||!this.tap(t,i))&&(this.clickStarted=!0,this.waitToGoOut=!0,this.onDown&&this.onDown(),!0)}up(t,i){return!!(this.isActive&&this.tap(t,i)&&this.clickStarted)&&(this.mouseOver=!1,this.onUp&&this.onUp(),this.onClick&&this.onClick(),this.func&&func(),!0)}}class UI extends Sprite{constructor(t,i){let s=t.x,e=t.y;s%1!=0&&(s=GAME.width*s),s<0&&(s=GAME.width+s),e%1!=0&&(e=GAME.height*e),e<0&&(e=GAME.height+e),super(s,e),this.debug=i,this.center=!0,t.hidden&&(this.isActive=!1),t.animation&&this.addAnimation(t.animation),t.states&&(this.animation.states=t.states,this.animation.state="idle"),this.scenes=t.scenes,t.func&&(this.func=window[t.func])}}class Button extends UI{constructor(t,i){super(t,i),this.mouseOver=!1,this.waitToGoOut=!1,this.clickStarted=!1,t.onOver&&(this.onOver=t.onOver),t.onOut&&(this.onOut=t.onOut),t.onDown&&(this.onDown=t.onDown),t.onClick&&(this.onClick=t.onClick)}over(t,i){const s=super.over(t,i);return s&&(this.animation.state="over"),s}out(t,i){const s=super.out(t,i);return s&&(this.animation.state="idle"),s}down(t,i){const s=super.down(t,i);return s&&(this.animation.state="active"),s}up(t,i){const s=super.up(t,i);return s&&(this.animation.state="idle"),s}}class Entity extends Sprite{constructor(t,i){super(t.x,t.y),this.debug=i,this.origin=new Cool.Vector(t.x,t.y),t.animation&&this.addAnimation(t.animation),this.center=t.center||!0}update(t){this.position.x=this.origin.x+t.x,this.position.y=this.origin.y+t.y}setPosition(t,i){this.origin.x=t,this.origin.y=i}}class Game{constructor(t){if(window.GAME=this,this.canvas=document.getElementById(t.canvas||"lines"),this.width=t.width,this.height=t.height,this.multiColor=t.multiColor||!1,this.debug=t.debug||!1,this.suspendOnTimeOver=t.suspend||!1,this.suspend=!1,this.editorSuspend=!1,this.lineWidth=t.lineWidth||1,this.checkRetina=void 0===t.checkRetina||t.checkRetina,this.dps=t.dps||30,this.drawTime=performance.now(),this.drawInterval=1e3/t.dps,window.drawCount=0,this.updateTime=performance.now(),this.updateInterval=1e3/60,this.clearBg=!0,this.bounds={top:0,bottom:0,left:0,right:0},this.scenes=new SceneManager(t.scenes,Scene),this.data={},this.anims={},this.useMouseEvents=!t.events||t.events.includes("mouse"),this.useKeyboardEvents=!t.events||t.events.includes("keyboard"),this.view={width:this.width,height:this.height},this.canvas.getContext){this.ctx=this.canvas.getContext("2d"),this.dpr=this.checkRetina&&window.devicePixelRatio||1;const i=t.zoom||1;this.canvas.width=this.width*this.dpr,this.canvas.height=this.height*this.dpr,this.ctx.scale(this.dpr,this.dpr),this.canvas.style.zoom=1/this.dpr,this.view.width=Math.round(this.width/i)*this.dpr,this.view.height=Math.round(this.height/i)*this.dpr,t.zoom&&this.ctx.scale(t.zoom*this.dpr,t.zoom*this.dpr),t.lineColor&&(this.ctx.strokeStyle=t.lineColor),t.scale&&this.ctx.scale(t.scale,t.scale),t.stats&&(this.stats=new Stats,document.body.appendChild(this.stats.dom),this.stats.dom.style.left="auto",this.stats.dom.style.right="0px",this.drawStats=new Stats,document.body.appendChild(this.drawStats.dom),this.drawStats.dom.style.left="auto",this.drawStats.dom.style.right="0px",this.drawStats.dom.style.top="48px"),this.ctx.lineWidth=this.lineWidth,this.ctx.miterLimit=1}}load(t,i,s){this.debug&&console.log("loading data"),this.debug&&console.time("load data"),this.assetsLoaded={};const e=Object.keys(t).length;for(const s in t){const e=t[s];fetch(e).then(t=>{if(t.ok)return t.url.includes("csv")?t.text():t.json();throw new Error("Network response was not ok.")}).then(t=>{if(this.data[s]={},this.anims[s]={},this.assetsLoaded[s]={},"object"==typeof t){this.data[s].entries=t;for(const e in t)this.assetsLoaded[s][e]=!!i,i||this.loadJSON(s,e,t[e].src),this.data[s].entries[e].src=t[e].src}else{const i=CSVToArray(t,",").splice(0);this.data[s].entries=[];const e=i[0];for(let t=1;t<i.length;t++){const h={};for(let s=0;s<e.length;s++)h[e[s]]=i[t][s];this.data[s].entries.push(h),this.assetsLoaded[s][h.label]=!1,this.loadJSON(s,h.label,`drawings/${s}/${h.label}.json`)}}}).catch(t=>{console.error(t),this.assetsLoaded[s]=!0})}const h=setInterval(()=>{let t=Object.keys(this.assetsLoaded).length==e;for(const i in this.assetsLoaded)for(const s in this.assetsLoaded[i])this.assetsLoaded[i][s]||(t=!1);t&&(this.debug&&console.timeEnd("load data"),clearInterval(h),this.start())},1e3/60)}loadJSON(t,i,s){fetch(s).then(t=>t.json()).then(e=>{this.anims[t][i]=new GameAnim,this.anims[t][i].src=s,this.anims[t][i].loadData(e,()=>{this.assetsLoaded[t][i]=!0})})}start(){this.drawTime=performance.now(),this.updateTime=performance.now(),"function"==typeof start&&start(),"function"!=typeof update&&(this.noUpdate=!0),requestAnimFrame(()=>{this.update()}),this.useMouseEvents&&this.startMouseEvents(),this.useKeyboardEvents&&this.startKeyboardEvents(),"function"==typeof sizeCanvas&&window.addEventListener("resize",sizeCanvas,!1)}draw(t){this.stats&&this.drawStats.begin(),this.clearBg&&this.ctx.clearRect(0,0,this.view.width,this.view.height),draw(t-this.drawTime),drawCount++,this.drawTime=t-(t-this.drawTime)%this.drawInterval,this.stats&&this.drawStats.end()}update(){this.stats&&this.stats.begin(),requestAnimFrame(()=>{this.update()});const t=performance.now();t>this.updateTime+this.updateInterval&&(this.suspendOnTimeOver&&!this.editorSuspend&&(!this.suspend&&t-this.updateTime>1.5*this.drawInterval?this.suspend=!0:this.suspend&&(this.suspend=!1)),this.noUpdate||update(t-this.updateTime),this.updateTime=t-(t-this.updateTime)%this.updateInterval),t>this.drawTime+this.drawInterval&&this.draw(t),this.stats&&this.stats.end()}setBounds(t,i){this.bounds[t]=i}updateBounds(t){t.y<this.bounds.top&&(this.bounds.top=t.y),t.y>this.bounds.bottom&&(this.bounds.bottom=t.y+this.height),t.x>this.bounds.right&&(this.bounds.right=t.x+this.width/2),t.x<this.bounds.left&&(this.bounds.left=t.x-this.width/2)}startMouseEvents(){let t,i=!1;this.canvas.addEventListener("click",(function(t){t.preventDefault(),"function"==typeof mouseClicked&&mouseClicked(t.offsetX,t.offsetY)}),!1),this.canvas.addEventListener("mousedown",(function(s){s.preventDefault(),"function"==typeof mouseDown&&mouseDown(s.offsetX,s.offsetY,s.which,s.shiftKey),"function"==typeof startDrag&&(t=startDrag(s.offsetX,s.offsetY),t&&(i=!0))}),!1),this.canvas.addEventListener("mouseup",(function(t){t.preventDefault(),"function"==typeof mouseUp&&mouseUp(t.offsetX,t.offsetY,t.which),i&&(i=!1)}),!1),this.canvas.addEventListener("mousemove",(function(s){"function"==typeof mouseMoved&&mouseMoved(s.offsetX,s.offsetY,s.which),i&&drag(s.offsetX,s.offsetY,t)}),!1)}startKeyboardEvents(){document.addEventListener("keydown",(function(t){"function"==typeof keyDown&&"INPUT"!=t.target.tagName&&keyDown(Cool.keys[t.which])})),document.addEventListener("keyup",(function(t){"function"==typeof keyUp&&"INPUT"!=t.target.tagName&&keyUp(Cool.keys[t.which])}))}}class GameAnim extends Lines{constructor(t){super(GAME.ctx,GAME.dps,GAME.multiColor),this.debug=t,this.loop=!0,this.randomFrames=!1,this.prevFrame=0}update(){if(this.isPlaying){if(this.drawCount==this.drawsPerFrame){if(this.randomFrames){for(;this.prevFrame==this.currentFrame;)this.currentFrame=Cool.randomInt(this.state.start,this.state.end);this.prevFrame=this.currentFrame}else this.currentFrame>=this.state.end?(this.currentFrame=this.loop?this.state.start:this.state.end,this.onPlayedOnce&&(this.onPlayeOnce(),this.onPlayedOnce=void 0),this.onPlayedState&&this.onPlayedState()):this.currentFrame++;this.drawCount=0}this.drawCount++,this.onUpdate&&this.onUpdate()}}createNewState(t,i,s){this.states[t]||(this.states[t]={start:i,end:s}),this.state=t}playStateCheck(){this.state.start!=this.state.end&&(this.isPlaying=!0)}set state(t){this._state!=t&&this.states[t]&&(this._state=t,this.state&&(this.frame=this.state.start),this.isPlaying||"default"==t||(this.isPlaying=!0))}get state(){return this.states[this._state]}playOnce(t){this.isPlaying||(this.isPlaying=!0),this.frame=this.state.start,this.onPlayedOnce=t}stop(){this.isPlaying=!1}play(){this.isPlaying=!0}}class Manager{constructor(t,i){for(let s=0;s<t.length;s++)this[t[s]]=new i;this._current=t[0],this.names=t}set current(t){this._current=t}get current(){return this[this._current]}get currentName(){return this._current}get list(){return this.names}}class Scene{constructor(){this.displaySprites=new SpriteCollection,this.updateSprites=new SpriteCollection,this.uiSprites=new SpriteCollection}add(t){this.displaySprites.add(t),this.updateSprites.add(t),this.uiSprites.add(t)}remove(t,i){const s=i?[i]:["display","update","ui"];for(let i=0;i<s.length;i++){const e=this[s[i]+"Sprites"].indexOf(t);e>=0&&this[s[i]+"Sprites"].splice(e,1)}}addSprite(t){this.displaySprites.add(t),this.updateSprites.add(t)}addUI(t){this.displaySprites.add(t),this.uiSprites.add(t)}addToDisplay(t){this.displaySprites.add(t)}addToUpdate(t){this.updateSprites.add(t)}addToUI(t){this.uiSprites.add(t)}display(t){this.displaySprites.all(i=>{i.display(t)})}update(t){this.updateSprites.all(i=>{i.update(t)})}mouseMoved(t,i){this.uiSprites.all(s=>{s.over(t,i),s.out(t,i)})}mouseDown(t,i){this.uiSprites.all(s=>{s.down(t,i)})}mouseUp(t,i){this.uiSprites.all(s=>{s.up(t,i)})}}class SceneManager extends Manager{add(t,i,s){"string"==typeof i&&(i=[i]);for(let e=0;e<i.length;e++)"display"==s?this[i[e]].addToDisplay(t):"ui"==s?this[i[e]].addUI(t):this[i[e]].add(t)}addToDisplay(t,i){this.add(t,i,"display")}addUI(t,i){this.add(t,i,"ui")}}class SpriteCollection{constructor(t){this.sprites=t?[...t]:[]}get length(){return this.sprites.length}includes(t){return this.sprites.includes(t)}sprite(t){return this.sprites[t]}remove(t){this.sprites.splice(this.sprites.indexOf(t),1)}clear(){this.sprites=[]}add(t){this.sprites.includes(t)||this.sprites.push(t)}all(t){for(let i=0;i<this.sprites.length;i++)t(this.sprites[i],i)}update(){this.all(t=>{t.update()})}display(){this.all(t=>{t.display()})}}class Text{constructor(t,i,s,e,h,o){if(this.x=Math.round(t),this.y=Math.round(i),this.lead=35,this.track=18,this.msg=s,this.wrap=e,this.isActive=!0,this.letters=h,this.breaks=[],this.setBreaks(),this.count=0,this.end=0,this.endCount=.5,this.endDelay=GAME.dps||10,this.hover=!1,this.clickStarted=!1,!h.states[0]){const t=o||"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.,:?-+'&$;\"!";for(let i=0;i<t.length;i++)h.createNewState(t[i],i,i)}}setPosition(t,i){this.x=t,this.y=i}setMsg(t){this.msg=t,this.setBreaks()}setBreaks(){let t=!1,i=0,s=!1;this.breaks=[];for(let e=1;e<this.msg.length;e++)s=!1,this.msg[e].match(/[\n\r]/g)&&!s?(this.breaks.push(e),i=e%this.wrap,t=!1):e%this.wrap!=i||t?" "==this.msg[e]&&t&&(this.breaks.push(e),i=e%this.wrap,t=!1,s=!0):" "==this.msg[e]?(this.breaks.push(e),s=!0):t=!0}display(t,i,s,e){if(this.isActive){const o=t?Math.floor(this.count):this.msg.length,n=i?this.end:0;let a=s||this.x,r=e||this.y;for(let t=0;t<o;t++){var h=this.msg[t];" "==h||"_"==h||t<n?a+=this.track:"\n"==h||"\r"==h||(this.letters.state=h,this.letters.draw(a,r),a+=this.track),-1!=this.breaks.indexOf(t)&&(r+=this.lead,a=s||this.x)}if(this.count>=this.msg.length?this.end++:this.count+=this.endCount,i){if(this.end>=this.msg.length)return this.end=0,this.count=0,!0}else if(this.end>=this.endDelay)return this.end=0,this.count=0,!0}}}class TextButton extends UI{constructor(t,i,s,e,h){super({x:t,y:i}),this.center=!1,this.text=new Text(this.position.x,this.position.y,s,e,h),this.setCollider()}setMsg(t){this.text.setMsg(t),this.text.wrap=t.length,this.setCollider()}setCollider(){this.size.x=this.collider.size.x=(this.text.wrap<this.text.msg.length?this.text.wrap:this.text.msg.length)*this.text.track,this.size.y=this.collider.size.y=(this.text.breaks.length+1)*this.text.letters.height}display(){super.display(),this.isActive&&this.text.display()}setPosition(t,i){this.position.x=t,this.position.y=i,this.text.setPosition(t,i)}}class Texture{constructor(t,i){this.locations=t.locations||[],this.frame=t.frame||"index",this.debug=i,this.center=t.center||!1,this.offset=new Cool.Vector(0,0),t.animation&&(this.animation=t.animation),t.locations&&t.animation&&this.addLocations()}addLocation(t,i,s){const e=new Cool.Vector(t,i);if(void 0!==s)this.animation.createNewState("f-"+s,s,s),e.i=s;else if("randomIndex"==this.frame){let t=Cool.randomInt(0,this.animation.endFrame);this.animation.createNewState("f-"+t,t,t),e.i=t}this.locations.push(e)}addLocations(t){t&&this.locations.push(...t);for(let t=0;t<this.locations.length;t++)if("index"==this.frame)this.locations[t].i=t,this.animation.createNewState("f-"+t,t,t);else if("random"==this.frame)this.animation.randomFrames=!0;else if("randomIndex"==this.frame){let i=Cool.randomInt(0,this.animation.endFrame);this.locations[t].i=i,this.animation.createNewState("f-"+i,i,i)}}display(){for(let t=0;t<this.locations.length;t++){let i=this.locations[t].x+this.offset.x,s=this.locations[t].y+this.offset.y;this.center&&(i-=this.animation.width/2,s-=this.animation.height/2),i+this.animation.width>0&&i<GAME.view.width&&s+this.animation.height>0&&s<GAME.view.height&&(void 0!==this.locations[t].i&&(this.animation.state="f-"+this.locations[t].i),this.animation.draw(i,s,GAME.suspend))}}isOnScreen(){let t=[];for(let i=0;i<this.locations.length;i++){let s=this.locations[i].x+this.offset.x,e=this.locations[i].y+this.offset.y;this.center&&(s-=this.animation.width/2,e-=this.animation.height/2),t.push(s+this.animation.width>0&&s<GAME.view.width&&e+this.animation.height>0&&e<GAME.view.height)}return t}update(t){this.offset.x=t.x,this.offset.y=t.y}}class Toggle extends Button{constructor(t,i){super(t,i),this.toggled=!1}toggle(t,i=!0){this.toggled=t?"on"==t:!this.toggled,this.animation.state=this.toggled?"selected":"idle",this.waitToGoOut=!1,this.mouseOver=!1,this.clickStarted=!1,i&&(this.func&&this.func(this.toggled),this.onClick&&this.onClick(this.toggled))}out(t,i){super.out(t,i),this.animation.state=this.toggled?"selected":"idle"}up(t,i){super.up(),this.tap(t,i)&&this.clickStarted&&this.toggle()}}
//# sourceMappingURL=src_maps/game.min.js.map
